{"ast":null,"code":"var _jsxFileName = \"X:\\\\GitHub-Repo\\\\fox-shrine-vtuber-website\\\\fox-shrine-vtuber\\\\src\\\\hooks\\\\useConfigDatabase.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuth } from './useAuth';\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigContext = /*#__PURE__*/createContext();\nexport const useConfig = () => {\n  _s();\n  return useContext(ConfigContext);\n};\n\n// Default configuration fallback\n_s(useConfig, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst defaultConfig = {\n  siteTitle: 'Fox Shrine VTuber',\n  siteDescription: 'Join the Fox Shrine for games, laughs, and shrine fox adventures!',\n  siteLogo: '/images/fox-shrine-logo.png',\n  siteUrl: 'https://foxshrinevtuber.com',\n  character: {\n    name: 'Fox Shrine Guardian',\n    description: 'A mischievous fox spirit who guards an ancient shrine and streams for fun!',\n    image: '/images/fox-character.png',\n    greeting: 'Welcome to my shrine, fellow foxes! 🦊'\n  },\n  social: {\n    twitchUrl: 'https://twitch.tv/foxshrinevtuber',\n    youtubeUrl: 'https://youtube.com/@foxshrinevtuber',\n    twitterUrl: 'https://twitter.com/foxshrinevtuber',\n    discordUrl: 'https://discord.gg/foxshrine',\n    instagramUrl: 'https://instagram.com/foxshrinevtuber'\n  },\n  stream: {\n    title: 'Fox Friday Funtime!',\n    category: 'Just Chatting',\n    isLive: false,\n    nextStreamDate: '2025-09-15T21:00:00Z',\n    notification: 'Join me tonight for some cozy games! 🎮'\n  },\n  theme: {\n    primaryColor: '#C41E3A',\n    secondaryColor: '#FF9500',\n    accentColor: '#5FB4A2',\n    backgroundColor: '#F5F1E8',\n    fontFamily: 'Cinzel, serif'\n  },\n  features: {\n    showMerch: true,\n    showDonations: true,\n    showSchedule: true,\n    showLatestVideos: true,\n    enableNotifications: true\n  },\n  content: {\n    heroTitle: 'Welcome to the Fox Shrine',\n    heroSubtitle: 'Join me on a magical journey filled with laughter, games, and shrine fox mischief!',\n    aboutText: 'Legend has it that I was once a regular fox who stumbled upon an abandoned shrine deep in the mystical forest.'\n  },\n  contact: {\n    businessEmail: 'business@foxshrinevtuber.com',\n    fanEmail: 'fanart@foxshrinevtuber.com',\n    supportEmail: 'support@foxshrinevtuber.com'\n  },\n  system: {\n    maintenanceMode: false,\n    maintenanceMessage: 'The shrine is currently under magical maintenance! Please check back soon! 🦊✨',\n    emergencyNotice: ''\n  }\n};\nconst isObject = item => {\n  return item && typeof item === 'object' && !Array.isArray(item);\n};\nconst mergeDeep = (target, source) => {\n  const output = {\n    ...target\n  };\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          output[key] = source[key];\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n};\n\n// Configuration Provider Component\nexport const ConfigProvider = ({\n  children\n}) => {\n  _s2();\n  const [config, setConfig] = useState(defaultConfig);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastSync, setLastSync] = useState(null);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const {\n    apiCall\n  } = useAuth(); // Keep this to use the authenticated apiCall for updates\n\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002/api';\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Fetches the configuration from the API using standard fetch\n  const fetchConfig = useCallback(async () => {\n    try {\n      // Config is a public endpoint, so we use global fetch\n      const response = await fetch('/api/config');\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          message: 'Invalid JSON response'\n        }));\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }, []);\n\n  // Load configuration from API\n  const loadConfigFromDatabase = useCallback(async () => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/config`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Add timeout\n        signal: AbortSignal.timeout(10000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success && result.data) {\n        // Merge with default config to ensure all properties exist\n        const mergedConfig = mergeDeep(defaultConfig, result.data);\n        setConfig(mergedConfig);\n        setLastSync(new Date());\n\n        // Save to localStorage as backup\n        localStorage.setItem('foxshrine_config', JSON.stringify(mergedConfig));\n        localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\n        console.log('✅ Configuration loaded from database successfully');\n        return mergedConfig;\n      } else {\n        throw new Error(result.error || 'Invalid response format');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load configuration from database:', error);\n\n      // Try to load from localStorage\n      const cachedConfig = localStorage.getItem('foxshrine_config');\n      if (cachedConfig) {\n        console.log('🔄 Using cached configuration as fallback');\n        setConfig(JSON.parse(cachedConfig));\n      } else {\n        // Fallback to default config\n        setError(error.message);\n        setConfig(defaultConfig);\n        console.log('🔄 Using default configuration as fallback');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [fetchConfig]); // Add fetchConfig to dependency array\n\n  // Update configuration in database\n  const updateConfig = useCallback(async (key, value, category = 'general') => {\n    try {\n      setError(null);\n\n      // Optimistic update\n      const keyPath = key.split('.');\n      const newConfig = {\n        ...config\n      };\n      let current = newConfig;\n      for (let i = 0; i < keyPath.length - 1; i++) {\n        if (!current[keyPath[i]]) {\n          current[keyPath[i]] = {};\n        }\n        current = current[keyPath[i]];\n      }\n      current[keyPath[keyPath.length - 1]] = value;\n      setConfig(newConfig);\n\n      // Send to API\n      const response = await apiCall(`${API_BASE_URL}/config/${key}`, 'PUT', {\n        value,\n        category\n      });\n      if (!response.ok) {\n        // Revert optimistic update on failure\n        setConfig(config);\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (!result.success) {\n        // Revert optimistic update on failure\n        setConfig(config);\n        throw new Error(result.error || 'Update failed');\n      }\n      console.log(`✅ Configuration updated: ${key} = ${value}`);\n\n      // Update localStorage\n      localStorage.setItem('foxshrine_config', JSON.stringify(newConfig));\n      localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\n      setLastSync(new Date());\n      return result.data;\n    } catch (error) {\n      console.error('❌ Failed to update configuration:', error);\n      setError(error.message);\n\n      // Revert optimistic update\n      setConfig(config);\n      throw error;\n    }\n  }, [config, API_BASE_URL, apiCall]);\n\n  // Bulk update configuration\n  const updateMultipleConfig = useCallback(async updates => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/config`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          configs: updates\n        }),\n        signal: AbortSignal.timeout(15000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Bulk update failed');\n      }\n\n      // Reload configuration after bulk update\n      await loadConfigFromDatabase();\n      console.log(`✅ Bulk configuration updated: ${updates.length} items`);\n      return result.data;\n    } catch (error) {\n      console.error('❌ Failed to bulk update configuration:', error);\n      setError(error.message);\n      throw error;\n    }\n  }, [API_BASE_URL, loadConfigFromDatabase]);\n\n  // Get stream status\n  const getStreamStatus = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(5000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.success ? result.data : null;\n    } catch (error) {\n      console.error('❌ Failed to get stream status:', error);\n      return null;\n    }\n  }, [API_BASE_URL]);\n\n  // Update stream status\n  const updateStreamStatus = useCallback(async streamData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(streamData),\n        signal: AbortSignal.timeout(10000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success) {\n        // Update local stream config\n        const updatedConfig = {\n          ...config\n        };\n        if (streamData.isLive !== undefined) updatedConfig.stream.isLive = streamData.isLive;\n        if (streamData.title) updatedConfig.stream.title = streamData.title;\n        if (streamData.category) updatedConfig.stream.category = streamData.category;\n        if (streamData.nextStream) updatedConfig.stream.nextStreamDate = streamData.nextStream;\n        if (streamData.notification) updatedConfig.stream.notification = streamData.notification;\n        setConfig(updatedConfig);\n        localStorage.setItem('foxshrine_config', JSON.stringify(updatedConfig));\n      }\n      return result.success ? result.data : null;\n    } catch (error) {\n      console.error('❌ Failed to update stream status:', error);\n      throw error;\n    }\n  }, [config, API_BASE_URL]);\n\n  // Initial load\n  useEffect(() => {\n    const initializeConfig = async () => {\n      setLoading(true);\n      try {\n        if (isOnline) {\n          await loadConfigFromDatabase();\n        } else {\n          // Load from cache when offline\n          const cachedConfig = localStorage.getItem('foxshrine_config');\n          if (cachedConfig) {\n            const parsedConfig = JSON.parse(cachedConfig);\n            setConfig(parsedConfig);\n            const cachedTimestamp = localStorage.getItem('foxshrine_config_timestamp');\n            setLastSync(new Date(cachedTimestamp));\n            setError('Offline - using cached data');\n          }\n        }\n      } catch (error) {\n        console.error('Failed to initialize config:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeConfig();\n  }, [isOnline, loadConfigFromDatabase]);\n\n  // Auto-refresh configuration every 5 minutes if online\n  useEffect(() => {\n    if (!isOnline) return;\n    const interval = setInterval(() => {\n      loadConfigFromDatabase();\n    }, 5 * 60 * 1000); // 5 minutes\n\n    return () => clearInterval(interval);\n  }, [isOnline, loadConfigFromDatabase]);\n  const contextValue = useMemo(() => ({\n    config,\n    loading,\n    error,\n    lastSync,\n    isOnline,\n    updateConfig,\n    updateMultipleConfig,\n    refreshConfig: loadConfigFromDatabase,\n    getStreamStatus,\n    updateStreamStatus\n  }), [config, loading, error, lastSync, isOnline, updateConfig, updateMultipleConfig, loadConfigFromDatabase, getStreamStatus, updateStreamStatus]);\n  return /*#__PURE__*/_jsxDEV(ConfigContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use configuration\n_s2(ConfigProvider, \"P5ENxvgVy+A0DLlOUVwGwUrMxUk=\", false, function () {\n  return [useAuth];\n});\n_c = ConfigProvider;\nexport const useConfigDatabase = () => {\n  _s3();\n  const context = useContext(ConfigContext);\n  if (!context) {\n    throw new Error('useConfigDatabase must be used within a ConfigProvider');\n  }\n  return context;\n};\n_s3(useConfigDatabase, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default useConfigDatabase;\nvar _c;\n$RefreshReg$(_c, \"ConfigProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useMemo","useAuth","jsxDEV","_jsxDEV","ConfigContext","useConfig","_s","defaultConfig","siteTitle","siteDescription","siteLogo","siteUrl","character","name","description","image","greeting","social","twitchUrl","youtubeUrl","twitterUrl","discordUrl","instagramUrl","stream","title","category","isLive","nextStreamDate","notification","theme","primaryColor","secondaryColor","accentColor","backgroundColor","fontFamily","features","showMerch","showDonations","showSchedule","showLatestVideos","enableNotifications","content","heroTitle","heroSubtitle","aboutText","contact","businessEmail","fanEmail","supportEmail","system","maintenanceMode","maintenanceMessage","emergencyNotice","isObject","item","Array","isArray","mergeDeep","target","source","output","Object","keys","forEach","key","ConfigProvider","children","_s2","config","setConfig","loading","setLoading","error","setError","lastSync","setLastSync","isOnline","setIsOnline","navigator","onLine","apiCall","API_BASE_URL","process","env","REACT_APP_API_URL","handleOnline","handleOffline","window","addEventListener","removeEventListener","fetchConfig","response","fetch","ok","errorData","json","catch","message","Error","status","data","loadConfigFromDatabase","method","headers","signal","AbortSignal","timeout","result","success","mergedConfig","Date","localStorage","setItem","JSON","stringify","toISOString","console","log","cachedConfig","getItem","parse","updateConfig","value","keyPath","split","newConfig","current","i","length","updateMultipleConfig","updates","body","configs","getStreamStatus","updateStreamStatus","streamData","updatedConfig","undefined","nextStream","initializeConfig","parsedConfig","cachedTimestamp","interval","setInterval","clearInterval","contextValue","refreshConfig","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useConfigDatabase","_s3","context","$RefreshReg$"],"sources":["X:/GitHub-Repo/fox-shrine-vtuber-website/fox-shrine-vtuber/src/hooks/useConfigDatabase.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useAuth } from './useAuth';\r\n\r\n// Create Context\r\nconst ConfigContext = createContext();\r\n\r\nexport const useConfig = () => useContext(ConfigContext);\r\n\r\n// Default configuration fallback\r\nconst defaultConfig = {\r\n  siteTitle: 'Fox Shrine VTuber',\r\n  siteDescription: 'Join the Fox Shrine for games, laughs, and shrine fox adventures!',\r\n  siteLogo: '/images/fox-shrine-logo.png',\r\n  siteUrl: 'https://foxshrinevtuber.com',\r\n  \r\n  character: {\r\n    name: 'Fox Shrine Guardian',\r\n    description: 'A mischievous fox spirit who guards an ancient shrine and streams for fun!',\r\n    image: '/images/fox-character.png',\r\n    greeting: 'Welcome to my shrine, fellow foxes! 🦊'\r\n  },\r\n  \r\n  social: {\r\n    twitchUrl: 'https://twitch.tv/foxshrinevtuber',\r\n    youtubeUrl: 'https://youtube.com/@foxshrinevtuber',\r\n    twitterUrl: 'https://twitter.com/foxshrinevtuber',\r\n    discordUrl: 'https://discord.gg/foxshrine',\r\n    instagramUrl: 'https://instagram.com/foxshrinevtuber'\r\n  },\r\n  \r\n  stream: {\r\n    title: 'Fox Friday Funtime!',\r\n    category: 'Just Chatting',\r\n    isLive: false,\r\n    nextStreamDate: '2025-09-15T21:00:00Z',\r\n    notification: 'Join me tonight for some cozy games! 🎮'\r\n  },\r\n  \r\n  theme: {\r\n    primaryColor: '#C41E3A',\r\n    secondaryColor: '#FF9500',\r\n    accentColor: '#5FB4A2',\r\n    backgroundColor: '#F5F1E8',\r\n    fontFamily: 'Cinzel, serif'\r\n  },\r\n  \r\n  features: {\r\n    showMerch: true,\r\n    showDonations: true,\r\n    showSchedule: true,\r\n    showLatestVideos: true,\r\n    enableNotifications: true\r\n  },\r\n  \r\n  content: {\r\n    heroTitle: 'Welcome to the Fox Shrine',\r\n    heroSubtitle: 'Join me on a magical journey filled with laughter, games, and shrine fox mischief!',\r\n    aboutText: 'Legend has it that I was once a regular fox who stumbled upon an abandoned shrine deep in the mystical forest.'\r\n  },\r\n  \r\n  contact: {\r\n    businessEmail: 'business@foxshrinevtuber.com',\r\n    fanEmail: 'fanart@foxshrinevtuber.com',\r\n    supportEmail: 'support@foxshrinevtuber.com'\r\n  },\r\n  \r\n  system: {\r\n    maintenanceMode: false,\r\n    maintenanceMessage: 'The shrine is currently under magical maintenance! Please check back soon! 🦊✨',\r\n    emergencyNotice: ''\r\n  }\r\n};\r\n\r\nconst isObject = (item) => {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n};\r\n\r\nconst mergeDeep = (target, source) => {\r\n  const output = { ...target };\r\n  \r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach(key => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target)) {\r\n          output[key] = source[key];\r\n        } else {\r\n          output[key] = mergeDeep(target[key], source[key]);\r\n        }\r\n      } else {\r\n        output[key] = source[key];\r\n      }\r\n    });\r\n  }\r\n  \r\n  return output;\r\n};\r\n\r\n// Configuration Provider Component\r\nexport const ConfigProvider = ({ children }) => {\r\n  const [config, setConfig] = useState(defaultConfig);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lastSync, setLastSync] = useState(null);\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const { apiCall } = useAuth(); // Keep this to use the authenticated apiCall for updates\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002/api';\r\n\r\n  // Network status monitoring\r\n  useEffect(() => {\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Fetches the configuration from the API using standard fetch\r\n  const fetchConfig = useCallback(async () => {\r\n    try {\r\n      // Config is a public endpoint, so we use global fetch\r\n      const response = await fetch('/api/config'); \r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({ message: 'Invalid JSON response' }));\r\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  // Load configuration from API\r\n  const loadConfigFromDatabase = useCallback(async () => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/config`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        // Add timeout\r\n        signal: AbortSignal.timeout(10000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success && result.data) {\r\n        // Merge with default config to ensure all properties exist\r\n        const mergedConfig = mergeDeep(defaultConfig, result.data);\r\n        setConfig(mergedConfig);\r\n        setLastSync(new Date());\r\n        \r\n        // Save to localStorage as backup\r\n        localStorage.setItem('foxshrine_config', JSON.stringify(mergedConfig));\r\n        localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\r\n        \r\n        console.log('✅ Configuration loaded from database successfully');\r\n        return mergedConfig;\r\n      } else {\r\n        throw new Error(result.error || 'Invalid response format');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to load configuration from database:', error);\r\n\r\n      // Try to load from localStorage\r\n      const cachedConfig = localStorage.getItem('foxshrine_config');\r\n      if (cachedConfig) {\r\n        console.log('🔄 Using cached configuration as fallback');\r\n        setConfig(JSON.parse(cachedConfig));\r\n      } else {\r\n        // Fallback to default config\r\n        setError(error.message);\r\n        setConfig(defaultConfig);\r\n        console.log('🔄 Using default configuration as fallback');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [fetchConfig]); // Add fetchConfig to dependency array\r\n\r\n  // Update configuration in database\r\n  const updateConfig = useCallback(async (key, value, category = 'general') => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Optimistic update\r\n      const keyPath = key.split('.');\r\n      const newConfig = { ...config };\r\n      let current = newConfig;\r\n      \r\n      for (let i = 0; i < keyPath.length - 1; i++) {\r\n        if (!current[keyPath[i]]) {\r\n          current[keyPath[i]] = {};\r\n        }\r\n        current = current[keyPath[i]];\r\n      }\r\n      current[keyPath[keyPath.length - 1]] = value;\r\n      setConfig(newConfig);\r\n\r\n      // Send to API\r\n      const response = await apiCall(`${API_BASE_URL}/config/${key}`, 'PUT', {\r\n        value,\r\n        category\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Revert optimistic update on failure\r\n        setConfig(config);\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (!result.success) {\r\n        // Revert optimistic update on failure\r\n        setConfig(config);\r\n        throw new Error(result.error || 'Update failed');\r\n      }\r\n\r\n      console.log(`✅ Configuration updated: ${key} = ${value}`);\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('foxshrine_config', JSON.stringify(newConfig));\r\n      localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\r\n      \r\n      setLastSync(new Date());\r\n      return result.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to update configuration:', error);\r\n      setError(error.message);\r\n      \r\n      // Revert optimistic update\r\n      setConfig(config);\r\n      throw error;\r\n    }\r\n  }, [config, API_BASE_URL, apiCall]);\r\n\r\n  // Bulk update configuration\r\n  const updateMultipleConfig = useCallback(async (updates) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/config`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ configs: updates }),\r\n        signal: AbortSignal.timeout(15000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Bulk update failed');\r\n      }\r\n\r\n      // Reload configuration after bulk update\r\n      await loadConfigFromDatabase();\r\n      \r\n      console.log(`✅ Bulk configuration updated: ${updates.length} items`);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to bulk update configuration:', error);\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n  }, [API_BASE_URL, loadConfigFromDatabase]);\r\n\r\n  // Get stream status\r\n  const getStreamStatus = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        signal: AbortSignal.timeout(5000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.success ? result.data : null;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get stream status:', error);\r\n      return null;\r\n    }\r\n  }, [API_BASE_URL]);\r\n\r\n  // Update stream status\r\n  const updateStreamStatus = useCallback(async (streamData) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(streamData),\r\n        signal: AbortSignal.timeout(10000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        // Update local stream config\r\n        const updatedConfig = { ...config };\r\n        if (streamData.isLive !== undefined) updatedConfig.stream.isLive = streamData.isLive;\r\n        if (streamData.title) updatedConfig.stream.title = streamData.title;\r\n        if (streamData.category) updatedConfig.stream.category = streamData.category;\r\n        if (streamData.nextStream) updatedConfig.stream.nextStreamDate = streamData.nextStream;\r\n        if (streamData.notification) updatedConfig.stream.notification = streamData.notification;\r\n        \r\n        setConfig(updatedConfig);\r\n        localStorage.setItem('foxshrine_config', JSON.stringify(updatedConfig));\r\n      }\r\n      \r\n      return result.success ? result.data : null;\r\n    } catch (error) {\r\n      console.error('❌ Failed to update stream status:', error);\r\n      throw error;\r\n    }\r\n  }, [config, API_BASE_URL]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    const initializeConfig = async () => {\r\n      setLoading(true);\r\n      try {\r\n        if (isOnline) {\r\n          await loadConfigFromDatabase();\r\n        } else {\r\n          // Load from cache when offline\r\n          const cachedConfig = localStorage.getItem('foxshrine_config');\r\n          if (cachedConfig) {\r\n            const parsedConfig = JSON.parse(cachedConfig);\r\n            setConfig(parsedConfig);\r\n            const cachedTimestamp = localStorage.getItem('foxshrine_config_timestamp');\r\n            setLastSync(new Date(cachedTimestamp));\r\n            setError('Offline - using cached data');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to initialize config:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeConfig();\r\n  }, [isOnline, loadConfigFromDatabase]);\r\n\r\n  // Auto-refresh configuration every 5 minutes if online\r\n  useEffect(() => {\r\n    if (!isOnline) return;\r\n\r\n    const interval = setInterval(() => {\r\n      loadConfigFromDatabase();\r\n    }, 5 * 60 * 1000); // 5 minutes\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isOnline, loadConfigFromDatabase]);\r\n\r\n  \r\n  \r\n  const contextValue = useMemo(() => ({\r\n    config,\r\n    loading,\r\n    error,\r\n    lastSync,\r\n    isOnline,\r\n    updateConfig,\r\n    updateMultipleConfig,\r\n    refreshConfig: loadConfigFromDatabase,\r\n    getStreamStatus,\r\n    updateStreamStatus\r\n  }), [config, loading, error, lastSync, isOnline, updateConfig, updateMultipleConfig, loadConfigFromDatabase, getStreamStatus, updateStreamStatus]);\r\n\r\n  return (\r\n    <ConfigContext.Provider value={contextValue}>\r\n      {children}\r\n    </ConfigContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use configuration\r\nexport const useConfigDatabase = () => {\r\n  const context = useContext(ConfigContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useConfigDatabase must be used within a ConfigProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default useConfigDatabase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}