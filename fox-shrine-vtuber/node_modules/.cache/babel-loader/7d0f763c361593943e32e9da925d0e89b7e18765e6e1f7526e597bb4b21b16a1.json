{"ast":null,"code":"var _jsxFileName = \"X:\\\\GitHub-Repo\\\\fox-shrine-vtuber-website\\\\fox-shrine-vtuber\\\\src\\\\hooks\\\\useConfigDatabase.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\n// Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigContext = /*#__PURE__*/createContext();\n\n// Default configuration fallback\nconst defaultConfig = {\n  siteTitle: 'Fox Shrine VTuber',\n  siteDescription: 'Join the Fox Shrine for games, laughs, and shrine fox adventures!',\n  siteLogo: '/images/fox-shrine-logo.png',\n  siteUrl: 'https://foxshrinevtuber.com',\n  character: {\n    name: 'Fox Shrine Guardian',\n    description: 'A mischievous fox spirit who guards an ancient shrine and streams for fun!',\n    image: '/images/fox-character.png',\n    greeting: 'Welcome to my shrine, fellow foxes! 🦊'\n  },\n  social: {\n    twitchUrl: 'https://twitch.tv/foxshrinevtuber',\n    youtubeUrl: 'https://youtube.com/@foxshrinevtuber',\n    twitterUrl: 'https://twitter.com/foxshrinevtuber',\n    discordUrl: 'https://discord.gg/foxshrine',\n    instagramUrl: 'https://instagram.com/foxshrinevtuber'\n  },\n  stream: {\n    title: 'Fox Friday Funtime!',\n    category: 'Just Chatting',\n    isLive: false,\n    nextStreamDate: '2025-09-15T21:00:00Z',\n    notification: 'Join me tonight for some cozy games! 🎮'\n  },\n  theme: {\n    primaryColor: '#C41E3A',\n    secondaryColor: '#FF9500',\n    accentColor: '#5FB4A2',\n    backgroundColor: '#F5F1E8',\n    fontFamily: 'Cinzel, serif'\n  },\n  features: {\n    showMerch: true,\n    showDonations: true,\n    showSchedule: true,\n    showLatestVideos: true,\n    enableNotifications: true\n  },\n  content: {\n    heroTitle: 'Welcome to the Fox Shrine',\n    heroSubtitle: 'Join me on a magical journey filled with laughter, games, and shrine fox mischief!',\n    aboutText: 'Legend has it that I was once a regular fox who stumbled upon an abandoned shrine deep in the mystical forest.'\n  },\n  contact: {\n    businessEmail: 'business@foxshrinevtuber.com',\n    fanEmail: 'fanart@foxshrinevtuber.com',\n    supportEmail: 'support@foxshrinevtuber.com'\n  },\n  system: {\n    maintenanceMode: false,\n    maintenanceMessage: 'The shrine is currently under magical maintenance! Please check back soon! 🦊✨',\n    emergencyNotice: ''\n  }\n};\n\n// Configuration Provider Component\nexport const ConfigProvider = ({\n  children\n}) => {\n  _s();\n  const [config, setConfig] = useState(defaultConfig);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastSync, setLastSync] = useState(null);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002/api';\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Load configuration from API\n  const loadConfigFromDatabase = useCallback(async () => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/config`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Add timeout\n        signal: AbortSignal.timeout(10000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success && result.data) {\n        // Merge with default config to ensure all properties exist\n        const mergedConfig = mergeDeep(defaultConfig, result.data);\n        setConfig(mergedConfig);\n        setLastSync(new Date());\n\n        // Save to localStorage as backup\n        localStorage.setItem('foxshrine_config', JSON.stringify(mergedConfig));\n        localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\n        console.log('✅ Configuration loaded from database successfully');\n        return mergedConfig;\n      } else {\n        throw new Error(result.error || 'Invalid response format');\n      }\n    } catch (error) {\n      console.error('❌ Failed to load configuration from database:', error);\n\n      // Try to load from localStorage\n      const cachedConfig = localStorage.getItem('foxshrine_config');\n      const cachedTimestamp = localStorage.getItem('foxshrine_config_timestamp');\n      if (cachedConfig) {\n        try {\n          const parsedConfig = JSON.parse(cachedConfig);\n          setConfig(parsedConfig);\n          setLastSync(new Date(cachedTimestamp));\n          console.log('📦 Using cached configuration');\n          setError(`Using cached data (${error.message})`);\n          return parsedConfig;\n        } catch (parseError) {\n          console.error('❌ Failed to parse cached configuration:', parseError);\n        }\n      }\n\n      // Fallback to default config\n      setError(error.message);\n      setConfig(defaultConfig);\n      console.log('🔄 Using default configuration as fallback');\n      return defaultConfig;\n    }\n  }, [API_BASE_URL]);\n\n  // Update configuration in database\n  const updateConfig = useCallback(async (key, value, category = 'general') => {\n    try {\n      setError(null);\n\n      // Optimistic update\n      const keyPath = key.split('.');\n      const newConfig = {\n        ...config\n      };\n      let current = newConfig;\n      for (let i = 0; i < keyPath.length - 1; i++) {\n        if (!current[keyPath[i]]) {\n          current[keyPath[i]] = {};\n        }\n        current = current[keyPath[i]];\n      }\n      current[keyPath[keyPath.length - 1]] = value;\n      setConfig(newConfig);\n\n      // Send to API\n      const response = await fetch(`${API_BASE_URL}/config/${key}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          value,\n          category\n        }),\n        signal: AbortSignal.timeout(10000)\n      });\n      if (!response.ok) {\n        // Revert optimistic update on failure\n        setConfig(config);\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (!result.success) {\n        // Revert optimistic update on failure\n        setConfig(config);\n        throw new Error(result.error || 'Update failed');\n      }\n      console.log(`✅ Configuration updated: ${key} = ${value}`);\n\n      // Update localStorage\n      localStorage.setItem('foxshrine_config', JSON.stringify(newConfig));\n      localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\n      setLastSync(new Date());\n      return result.data;\n    } catch (error) {\n      console.error('❌ Failed to update configuration:', error);\n      setError(error.message);\n\n      // Revert optimistic update\n      setConfig(config);\n      throw error;\n    }\n  }, [config, API_BASE_URL]);\n\n  // Bulk update configuration\n  const updateMultipleConfig = useCallback(async updates => {\n    try {\n      setError(null);\n      const response = await fetch(`${API_BASE_URL}/config`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          configs: updates\n        }),\n        signal: AbortSignal.timeout(15000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Bulk update failed');\n      }\n\n      // Reload configuration after bulk update\n      await loadConfigFromDatabase();\n      console.log(`✅ Bulk configuration updated: ${updates.length} items`);\n      return result.data;\n    } catch (error) {\n      console.error('❌ Failed to bulk update configuration:', error);\n      setError(error.message);\n      throw error;\n    }\n  }, [API_BASE_URL, loadConfigFromDatabase]);\n\n  // Get stream status\n  const getStreamStatus = useCallback(async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(5000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.success ? result.data : null;\n    } catch (error) {\n      console.error('❌ Failed to get stream status:', error);\n      return null;\n    }\n  }, [API_BASE_URL]);\n\n  // Update stream status\n  const updateStreamStatus = useCallback(async streamData => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(streamData),\n        signal: AbortSignal.timeout(10000)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success) {\n        // Update local stream config\n        const updatedConfig = {\n          ...config\n        };\n        if (streamData.isLive !== undefined) updatedConfig.stream.isLive = streamData.isLive;\n        if (streamData.title) updatedConfig.stream.title = streamData.title;\n        if (streamData.category) updatedConfig.stream.category = streamData.category;\n        if (streamData.nextStream) updatedConfig.stream.nextStreamDate = streamData.nextStream;\n        if (streamData.notification) updatedConfig.stream.notification = streamData.notification;\n        setConfig(updatedConfig);\n        localStorage.setItem('foxshrine_config', JSON.stringify(updatedConfig));\n      }\n      return result.success ? result.data : null;\n    } catch (error) {\n      console.error('❌ Failed to update stream status:', error);\n      throw error;\n    }\n  }, [config, API_BASE_URL]);\n\n  // Initial load\n  useEffect(() => {\n    const initializeConfig = async () => {\n      setLoading(true);\n      try {\n        if (isOnline) {\n          await loadConfigFromDatabase();\n        } else {\n          // Load from cache when offline\n          const cachedConfig = localStorage.getItem('foxshrine_config');\n          if (cachedConfig) {\n            const parsedConfig = JSON.parse(cachedConfig);\n            setConfig(parsedConfig);\n            const cachedTimestamp = localStorage.getItem('foxshrine_config_timestamp');\n            setLastSync(new Date(cachedTimestamp));\n            setError('Offline - using cached data');\n          }\n        }\n      } catch (error) {\n        console.error('Failed to initialize config:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeConfig();\n  }, [isOnline, loadConfigFromDatabase]);\n\n  // Auto-refresh configuration every 5 minutes if online\n  useEffect(() => {\n    if (!isOnline) return;\n    const interval = setInterval(() => {\n      loadConfigFromDatabase();\n    }, 5 * 60 * 1000); // 5 minutes\n\n    return () => clearInterval(interval);\n  }, [isOnline, loadConfigFromDatabase]);\n\n  // Deep merge helper function\n  const mergeDeep = (target, source) => {\n    const output = {\n      ...target\n    };\n    if (isObject(target) && isObject(source)) {\n      Object.keys(source).forEach(key => {\n        if (isObject(source[key])) {\n          if (!(key in target)) {\n            output[key] = source[key];\n          } else {\n            output[key] = mergeDeep(target[key], source[key]);\n          }\n        } else {\n          output[key] = source[key];\n        }\n      });\n    }\n    return output;\n  };\n  const isObject = item => {\n    return item && typeof item === 'object' && !Array.isArray(item);\n  };\n  const contextValue = {\n    config,\n    loading,\n    error,\n    lastSync,\n    isOnline,\n    updateConfig,\n    updateMultipleConfig,\n    refreshConfig: loadConfigFromDatabase,\n    getStreamStatus,\n    updateStreamStatus\n  };\n  return /*#__PURE__*/_jsxDEV(ConfigContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use configuration\n_s(ConfigProvider, \"Wth09YjE7rKQe5diwZWORKucyI8=\");\n_c = ConfigProvider;\nexport const useConfigDatabase = () => {\n  _s2();\n  const context = useContext(ConfigContext);\n  if (!context) {\n    throw new Error('useConfigDatabase must be used within a ConfigProvider');\n  }\n  return context;\n};\n_s2(useConfigDatabase, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default useConfigDatabase;\nvar _c;\n$RefreshReg$(_c, \"ConfigProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","ConfigContext","defaultConfig","siteTitle","siteDescription","siteLogo","siteUrl","character","name","description","image","greeting","social","twitchUrl","youtubeUrl","twitterUrl","discordUrl","instagramUrl","stream","title","category","isLive","nextStreamDate","notification","theme","primaryColor","secondaryColor","accentColor","backgroundColor","fontFamily","features","showMerch","showDonations","showSchedule","showLatestVideos","enableNotifications","content","heroTitle","heroSubtitle","aboutText","contact","businessEmail","fanEmail","supportEmail","system","maintenanceMode","maintenanceMessage","emergencyNotice","ConfigProvider","children","_s","config","setConfig","loading","setLoading","error","setError","lastSync","setLastSync","isOnline","setIsOnline","navigator","onLine","API_BASE_URL","process","env","REACT_APP_API_URL","handleOnline","handleOffline","window","addEventListener","removeEventListener","loadConfigFromDatabase","response","fetch","method","headers","signal","AbortSignal","timeout","ok","Error","status","result","json","success","data","mergedConfig","mergeDeep","Date","localStorage","setItem","JSON","stringify","toISOString","console","log","cachedConfig","getItem","cachedTimestamp","parsedConfig","parse","message","parseError","updateConfig","key","value","keyPath","split","newConfig","current","i","length","body","updateMultipleConfig","updates","configs","getStreamStatus","updateStreamStatus","streamData","updatedConfig","undefined","nextStream","initializeConfig","interval","setInterval","clearInterval","target","source","output","isObject","Object","keys","forEach","item","Array","isArray","contextValue","refreshConfig","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useConfigDatabase","_s2","context","$RefreshReg$"],"sources":["X:/GitHub-Repo/fox-shrine-vtuber-website/fox-shrine-vtuber/src/hooks/useConfigDatabase.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\r\n\r\n// Create Context\r\nconst ConfigContext = createContext();\r\n\r\n// Default configuration fallback\r\nconst defaultConfig = {\r\n  siteTitle: 'Fox Shrine VTuber',\r\n  siteDescription: 'Join the Fox Shrine for games, laughs, and shrine fox adventures!',\r\n  siteLogo: '/images/fox-shrine-logo.png',\r\n  siteUrl: 'https://foxshrinevtuber.com',\r\n  \r\n  character: {\r\n    name: 'Fox Shrine Guardian',\r\n    description: 'A mischievous fox spirit who guards an ancient shrine and streams for fun!',\r\n    image: '/images/fox-character.png',\r\n    greeting: 'Welcome to my shrine, fellow foxes! 🦊'\r\n  },\r\n  \r\n  social: {\r\n    twitchUrl: 'https://twitch.tv/foxshrinevtuber',\r\n    youtubeUrl: 'https://youtube.com/@foxshrinevtuber',\r\n    twitterUrl: 'https://twitter.com/foxshrinevtuber',\r\n    discordUrl: 'https://discord.gg/foxshrine',\r\n    instagramUrl: 'https://instagram.com/foxshrinevtuber'\r\n  },\r\n  \r\n  stream: {\r\n    title: 'Fox Friday Funtime!',\r\n    category: 'Just Chatting',\r\n    isLive: false,\r\n    nextStreamDate: '2025-09-15T21:00:00Z',\r\n    notification: 'Join me tonight for some cozy games! 🎮'\r\n  },\r\n  \r\n  theme: {\r\n    primaryColor: '#C41E3A',\r\n    secondaryColor: '#FF9500',\r\n    accentColor: '#5FB4A2',\r\n    backgroundColor: '#F5F1E8',\r\n    fontFamily: 'Cinzel, serif'\r\n  },\r\n  \r\n  features: {\r\n    showMerch: true,\r\n    showDonations: true,\r\n    showSchedule: true,\r\n    showLatestVideos: true,\r\n    enableNotifications: true\r\n  },\r\n  \r\n  content: {\r\n    heroTitle: 'Welcome to the Fox Shrine',\r\n    heroSubtitle: 'Join me on a magical journey filled with laughter, games, and shrine fox mischief!',\r\n    aboutText: 'Legend has it that I was once a regular fox who stumbled upon an abandoned shrine deep in the mystical forest.'\r\n  },\r\n  \r\n  contact: {\r\n    businessEmail: 'business@foxshrinevtuber.com',\r\n    fanEmail: 'fanart@foxshrinevtuber.com',\r\n    supportEmail: 'support@foxshrinevtuber.com'\r\n  },\r\n  \r\n  system: {\r\n    maintenanceMode: false,\r\n    maintenanceMessage: 'The shrine is currently under magical maintenance! Please check back soon! 🦊✨',\r\n    emergencyNotice: ''\r\n  }\r\n};\r\n\r\n// Configuration Provider Component\r\nexport const ConfigProvider = ({ children }) => {\r\n  const [config, setConfig] = useState(defaultConfig);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [lastSync, setLastSync] = useState(null);\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002/api';\r\n\r\n  // Network status monitoring\r\n  useEffect(() => {\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  // Load configuration from API\r\n  const loadConfigFromDatabase = useCallback(async () => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/config`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        // Add timeout\r\n        signal: AbortSignal.timeout(10000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success && result.data) {\r\n        // Merge with default config to ensure all properties exist\r\n        const mergedConfig = mergeDeep(defaultConfig, result.data);\r\n        setConfig(mergedConfig);\r\n        setLastSync(new Date());\r\n        \r\n        // Save to localStorage as backup\r\n        localStorage.setItem('foxshrine_config', JSON.stringify(mergedConfig));\r\n        localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\r\n        \r\n        console.log('✅ Configuration loaded from database successfully');\r\n        return mergedConfig;\r\n      } else {\r\n        throw new Error(result.error || 'Invalid response format');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to load configuration from database:', error);\r\n      \r\n      // Try to load from localStorage\r\n      const cachedConfig = localStorage.getItem('foxshrine_config');\r\n      const cachedTimestamp = localStorage.getItem('foxshrine_config_timestamp');\r\n      \r\n      if (cachedConfig) {\r\n        try {\r\n          const parsedConfig = JSON.parse(cachedConfig);\r\n          setConfig(parsedConfig);\r\n          setLastSync(new Date(cachedTimestamp));\r\n          console.log('📦 Using cached configuration');\r\n          setError(`Using cached data (${error.message})`);\r\n          return parsedConfig;\r\n        } catch (parseError) {\r\n          console.error('❌ Failed to parse cached configuration:', parseError);\r\n        }\r\n      }\r\n      \r\n      // Fallback to default config\r\n      setError(error.message);\r\n      setConfig(defaultConfig);\r\n      console.log('🔄 Using default configuration as fallback');\r\n      return defaultConfig;\r\n    }\r\n  }, [API_BASE_URL]);\r\n\r\n  // Update configuration in database\r\n  const updateConfig = useCallback(async (key, value, category = 'general') => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Optimistic update\r\n      const keyPath = key.split('.');\r\n      const newConfig = { ...config };\r\n      let current = newConfig;\r\n      \r\n      for (let i = 0; i < keyPath.length - 1; i++) {\r\n        if (!current[keyPath[i]]) {\r\n          current[keyPath[i]] = {};\r\n        }\r\n        current = current[keyPath[i]];\r\n      }\r\n      current[keyPath[keyPath.length - 1]] = value;\r\n      setConfig(newConfig);\r\n\r\n      // Send to API\r\n      const response = await fetch(`${API_BASE_URL}/config/${key}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ value, category }),\r\n        signal: AbortSignal.timeout(10000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Revert optimistic update on failure\r\n        setConfig(config);\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (!result.success) {\r\n        // Revert optimistic update on failure\r\n        setConfig(config);\r\n        throw new Error(result.error || 'Update failed');\r\n      }\r\n\r\n      console.log(`✅ Configuration updated: ${key} = ${value}`);\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('foxshrine_config', JSON.stringify(newConfig));\r\n      localStorage.setItem('foxshrine_config_timestamp', new Date().toISOString());\r\n      \r\n      setLastSync(new Date());\r\n      return result.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to update configuration:', error);\r\n      setError(error.message);\r\n      \r\n      // Revert optimistic update\r\n      setConfig(config);\r\n      throw error;\r\n    }\r\n  }, [config, API_BASE_URL]);\r\n\r\n  // Bulk update configuration\r\n  const updateMultipleConfig = useCallback(async (updates) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/config`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ configs: updates }),\r\n        signal: AbortSignal.timeout(15000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Bulk update failed');\r\n      }\r\n\r\n      // Reload configuration after bulk update\r\n      await loadConfigFromDatabase();\r\n      \r\n      console.log(`✅ Bulk configuration updated: ${updates.length} items`);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.error('❌ Failed to bulk update configuration:', error);\r\n      setError(error.message);\r\n      throw error;\r\n    }\r\n  }, [API_BASE_URL, loadConfigFromDatabase]);\r\n\r\n  // Get stream status\r\n  const getStreamStatus = useCallback(async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        signal: AbortSignal.timeout(5000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.success ? result.data : null;\r\n    } catch (error) {\r\n      console.error('❌ Failed to get stream status:', error);\r\n      return null;\r\n    }\r\n  }, [API_BASE_URL]);\r\n\r\n  // Update stream status\r\n  const updateStreamStatus = useCallback(async (streamData) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/stream/status`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(streamData),\r\n        signal: AbortSignal.timeout(10000)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        // Update local stream config\r\n        const updatedConfig = { ...config };\r\n        if (streamData.isLive !== undefined) updatedConfig.stream.isLive = streamData.isLive;\r\n        if (streamData.title) updatedConfig.stream.title = streamData.title;\r\n        if (streamData.category) updatedConfig.stream.category = streamData.category;\r\n        if (streamData.nextStream) updatedConfig.stream.nextStreamDate = streamData.nextStream;\r\n        if (streamData.notification) updatedConfig.stream.notification = streamData.notification;\r\n        \r\n        setConfig(updatedConfig);\r\n        localStorage.setItem('foxshrine_config', JSON.stringify(updatedConfig));\r\n      }\r\n      \r\n      return result.success ? result.data : null;\r\n    } catch (error) {\r\n      console.error('❌ Failed to update stream status:', error);\r\n      throw error;\r\n    }\r\n  }, [config, API_BASE_URL]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    const initializeConfig = async () => {\r\n      setLoading(true);\r\n      try {\r\n        if (isOnline) {\r\n          await loadConfigFromDatabase();\r\n        } else {\r\n          // Load from cache when offline\r\n          const cachedConfig = localStorage.getItem('foxshrine_config');\r\n          if (cachedConfig) {\r\n            const parsedConfig = JSON.parse(cachedConfig);\r\n            setConfig(parsedConfig);\r\n            const cachedTimestamp = localStorage.getItem('foxshrine_config_timestamp');\r\n            setLastSync(new Date(cachedTimestamp));\r\n            setError('Offline - using cached data');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to initialize config:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeConfig();\r\n  }, [isOnline, loadConfigFromDatabase]);\r\n\r\n  // Auto-refresh configuration every 5 minutes if online\r\n  useEffect(() => {\r\n    if (!isOnline) return;\r\n\r\n    const interval = setInterval(() => {\r\n      loadConfigFromDatabase();\r\n    }, 5 * 60 * 1000); // 5 minutes\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isOnline, loadConfigFromDatabase]);\r\n\r\n  // Deep merge helper function\r\n  const mergeDeep = (target, source) => {\r\n    const output = { ...target };\r\n    \r\n    if (isObject(target) && isObject(source)) {\r\n      Object.keys(source).forEach(key => {\r\n        if (isObject(source[key])) {\r\n          if (!(key in target)) {\r\n            output[key] = source[key];\r\n          } else {\r\n            output[key] = mergeDeep(target[key], source[key]);\r\n          }\r\n        } else {\r\n          output[key] = source[key];\r\n        }\r\n      });\r\n    }\r\n    \r\n    return output;\r\n  };\r\n\r\n  const isObject = (item) => {\r\n    return item && typeof item === 'object' && !Array.isArray(item);\r\n  };\r\n\r\n  const contextValue = {\r\n    config,\r\n    loading,\r\n    error,\r\n    lastSync,\r\n    isOnline,\r\n    updateConfig,\r\n    updateMultipleConfig,\r\n    refreshConfig: loadConfigFromDatabase,\r\n    getStreamStatus,\r\n    updateStreamStatus\r\n  };\r\n\r\n  return (\r\n    <ConfigContext.Provider value={contextValue}>\r\n      {children}\r\n    </ConfigContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use configuration\r\nexport const useConfigDatabase = () => {\r\n  const context = useContext(ConfigContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useConfigDatabase must be used within a ConfigProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default useConfigDatabase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}