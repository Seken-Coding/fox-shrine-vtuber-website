{"ast":null,"code":"var _jsxFileName = \"X:\\\\GitHub-Repo\\\\fox-shrine-vtuber-website\\\\fox-shrine-vtuber\\\\src\\\\hooks\\\\useConfigDatabase.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { siteConfig as defaultConfig } from '../config/siteConfig';\n\n// Create context for configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigContext = /*#__PURE__*/createContext();\n\n// API Configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Custom hook to use configuration\nexport const useConfig = () => {\n  _s();\n  const context = useContext(ConfigContext);\n  if (!context) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  return context;\n};\n\n// Configuration provider component\n_s(useConfig, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ConfigProvider = ({\n  children\n}) => {\n  _s2();\n  const [config, setConfig] = useState(defaultConfig);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [lastSynced, setLastSynced] = useState(null);\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  const loadConfigFromDatabase = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch(`${API_BASE_URL}/config`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success && data.config) {\n        console.log('✅ Config loaded from database:', data.config);\n        setConfig(prevConfig => ({\n          ...defaultConfig,\n          ...data.config\n        }));\n        setLastSynced(new Date());\n\n        // Also save to localStorage as backup\n        localStorage.setItem('foxShrineConfig', JSON.stringify(data.config));\n        localStorage.setItem('foxShrineConfigTimestamp', data.lastUpdated || new Date().toISOString());\n      } else {\n        throw new Error(data.message || 'Invalid response format');\n      }\n    } catch (error) {\n      console.warn('⚠️ Failed to load from database, using local fallback:', error);\n\n      // Fallback to localStorage\n      const savedConfig = localStorage.getItem('foxShrineConfig');\n      if (savedConfig) {\n        try {\n          const parsedConfig = JSON.parse(savedConfig);\n          setConfig(prevConfig => ({\n            ...defaultConfig,\n            ...parsedConfig\n          }));\n        } catch (parseError) {\n          console.error('Failed to parse local config:', parseError);\n          setConfig(defaultConfig);\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Load config from database on mount\n  useEffect(() => {\n    loadConfigFromDatabase();\n  }, []);\n\n  // Sync with database when coming back online\n  useEffect(() => {\n    if (isOnline && !lastSynced) {\n      loadConfigFromDatabase();\n    }\n  }, [isOnline, lastSynced]);\n\n  // Update configuration function with database sync\n  const updateConfig = async (path, value) => {\n    // Optimistic update - update local state immediately\n    setConfig(prevConfig => {\n      const newConfig = JSON.parse(JSON.stringify(prevConfig));\n      const keys = path.split('.');\n      let current = newConfig;\n      for (let i = 0; i < keys.length - 1; i++) {\n        if (!current[keys[i]] || typeof current[keys[i]] !== 'object') {\n          current[keys[i]] = {};\n        }\n        current = current[keys[i]];\n      }\n      current[keys[keys.length - 1]] = value;\n\n      // Save to localStorage immediately as backup\n      localStorage.setItem('foxShrineConfig', JSON.stringify(newConfig));\n      return newConfig;\n    });\n\n    // Sync to database if online\n    if (isOnline) {\n      try {\n        const dataType = typeof value === 'boolean' ? 'boolean' : typeof value === 'number' ? 'number' : typeof value === 'object' ? 'json' : 'string';\n        const response = await fetch(`${API_BASE_URL}/config/update`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            path,\n            value,\n            dataType\n          })\n        });\n        const result = await response.json();\n        if (result.success) {\n          console.log(`✅ Config synced to database: ${path} = ${value}`);\n          setLastSynced(new Date());\n        } else {\n          throw new Error(result.message);\n        }\n      } catch (error) {\n        console.error(`❌ Failed to sync to database: ${path}`, error);\n        // Note: Local state is already updated, so app continues to work\n      }\n    } else {\n      console.log(`📱 Offline: Config saved locally, will sync when online: ${path} = ${value}`);\n    }\n  };\n\n  // Reset config to defaults\n  const resetConfig = async () => {\n    if (isOnline) {\n      try {\n        const response = await fetch(`${API_BASE_URL}/config/reset`, {\n          method: 'POST'\n        });\n        const result = await response.json();\n        if (result.success) {\n          console.log('✅ Config reset in database');\n          await loadConfigFromDatabase(); // Reload from database\n        }\n      } catch (error) {\n        console.error('❌ Failed to reset database config:', error);\n      }\n    }\n\n    // Always reset local config\n    localStorage.removeItem('foxShrineConfig');\n    localStorage.removeItem('foxShrineConfigTimestamp');\n    setConfig(defaultConfig);\n  };\n\n  // Export current config as JSON\n  const exportConfig = () => {\n    const configContent = `// Fox Shrine VTuber Website Configuration\n// Generated on: ${new Date().toISOString()}\n// Database sync: ${lastSynced ? lastSynced.toISOString() : 'Never'}\n\nexport const siteConfig = ${JSON.stringify(config, null, 2)};\n\n// Helper Functions\nexport const getSocialLink = (platform) => {\n  return siteConfig.socialMedia[platform] || '#';\n};\n\nexport const getSupportLink = (platform) => {\n  return siteConfig.support[platform] || '#';\n};\n\nexport const isFeatureEnabled = (feature) => {\n  return siteConfig.features[feature] || false;\n};\n\nexport const getCharacterInfo = (field) => {\n  return siteConfig.character[field] || '';\n};\n\nexport const getStreamingInfo = (field) => {\n  return siteConfig.streaming[field] || '';\n};\n\nexport const getScheduleForDay = (day) => {\n  return siteConfig.schedule.weekly[day.toLowerCase()] || null;\n};\n`;\n    const blob = new Blob([configContent], {\n      type: 'text/javascript'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `foxshrine-config-${Date.now()}.js`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // Helper functions that work with current config\n  const getSocialLink = platform => {\n    var _config$socialMedia;\n    return ((_config$socialMedia = config.socialMedia) === null || _config$socialMedia === void 0 ? void 0 : _config$socialMedia[platform]) || '#';\n  };\n  const getSupportLink = platform => {\n    var _config$support;\n    return ((_config$support = config.support) === null || _config$support === void 0 ? void 0 : _config$support[platform]) || '#';\n  };\n  const isFeatureEnabled = feature => {\n    var _config$features;\n    return ((_config$features = config.features) === null || _config$features === void 0 ? void 0 : _config$features[feature]) || false;\n  };\n  const getCharacterInfo = field => {\n    var _config$character;\n    return ((_config$character = config.character) === null || _config$character === void 0 ? void 0 : _config$character[field]) || '';\n  };\n  const getStreamingInfo = field => {\n    var _config$streaming;\n    return ((_config$streaming = config.streaming) === null || _config$streaming === void 0 ? void 0 : _config$streaming[field]) || '';\n  };\n  const getNavigationItems = () => {\n    var _config$navigationMen;\n    return ((_config$navigationMen = config.navigationMenu) === null || _config$navigationMen === void 0 ? void 0 : _config$navigationMen.filter(item => {\n      if (item.path === '/gallery' && !isFeatureEnabled('enableFanArtGallery')) {\n        return false;\n      }\n      if (item.path === '/merch' && !isFeatureEnabled('showMerchSection')) {\n        return false;\n      }\n      return true;\n    })) || [];\n  };\n  const value = {\n    config,\n    updateConfig,\n    resetConfig,\n    exportConfig,\n    loadConfigFromDatabase,\n    getSocialLink,\n    getSupportLink,\n    isFeatureEnabled,\n    getCharacterInfo,\n    getStreamingInfo,\n    getNavigationItems,\n    // Status indicators\n    isLoading,\n    isOnline,\n    lastSynced\n  };\n  return /*#__PURE__*/_jsxDEV(ConfigContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s2(ConfigProvider, \"V24GKQoArnOt8SrSRWMkp3wRGCQ=\");\n_c = ConfigProvider;\nexport default ConfigProvider;\nvar _c;\n$RefreshReg$(_c, \"ConfigProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","siteConfig","defaultConfig","jsxDEV","_jsxDEV","ConfigContext","API_BASE_URL","process","env","REACT_APP_API_URL","useConfig","_s","context","Error","ConfigProvider","children","_s2","config","setConfig","isLoading","setIsLoading","isOnline","setIsOnline","navigator","onLine","lastSynced","setLastSynced","handleOnline","handleOffline","window","addEventListener","removeEventListener","loadConfigFromDatabase","response","fetch","ok","status","data","json","success","console","log","prevConfig","Date","localStorage","setItem","JSON","stringify","lastUpdated","toISOString","message","error","warn","savedConfig","getItem","parsedConfig","parse","parseError","updateConfig","path","value","newConfig","keys","split","current","i","length","dataType","method","headers","body","result","resetConfig","removeItem","exportConfig","configContent","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","now","appendChild","click","removeChild","revokeObjectURL","getSocialLink","platform","_config$socialMedia","socialMedia","getSupportLink","_config$support","support","isFeatureEnabled","feature","_config$features","features","getCharacterInfo","field","_config$character","character","getStreamingInfo","_config$streaming","streaming","getNavigationItems","_config$navigationMen","navigationMenu","filter","item","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["X:/GitHub-Repo/fox-shrine-vtuber-website/fox-shrine-vtuber/src/hooks/useConfigDatabase.js"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\r\nimport { siteConfig as defaultConfig } from '../config/siteConfig';\r\n\r\n// Create context for configuration\r\nconst ConfigContext = createContext();\r\n\r\n// API Configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Custom hook to use configuration\r\nexport const useConfig = () => {\r\n  const context = useContext(ConfigContext);\r\n  if (!context) {\r\n    throw new Error('useConfig must be used within a ConfigProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Configuration provider component\r\nexport const ConfigProvider = ({ children }) => {\r\n  const [config, setConfig] = useState(defaultConfig);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const [lastSynced, setLastSynced] = useState(null);\r\n\r\n  // Network status monitoring\r\n  useEffect(() => {\r\n    const handleOnline = () => setIsOnline(true);\r\n    const handleOffline = () => setIsOnline(false);\r\n    \r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n    \r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  const loadConfigFromDatabase = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await fetch(`${API_BASE_URL}/config`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (data.success && data.config) {\r\n        console.log('✅ Config loaded from database:', data.config);\r\n        setConfig(prevConfig => ({\r\n          ...defaultConfig,\r\n          ...data.config\r\n        }));\r\n        setLastSynced(new Date());\r\n        \r\n        // Also save to localStorage as backup\r\n        localStorage.setItem('foxShrineConfig', JSON.stringify(data.config));\r\n        localStorage.setItem('foxShrineConfigTimestamp', data.lastUpdated || new Date().toISOString());\r\n      } else {\r\n        throw new Error(data.message || 'Invalid response format');\r\n      }\r\n    } catch (error) {\r\n      console.warn('⚠️ Failed to load from database, using local fallback:', error);\r\n      \r\n      // Fallback to localStorage\r\n      const savedConfig = localStorage.getItem('foxShrineConfig');\r\n      if (savedConfig) {\r\n        try {\r\n          const parsedConfig = JSON.parse(savedConfig);\r\n          setConfig(prevConfig => ({\r\n            ...defaultConfig,\r\n            ...parsedConfig\r\n          }));\r\n        } catch (parseError) {\r\n          console.error('Failed to parse local config:', parseError);\r\n          setConfig(defaultConfig);\r\n        }\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Load config from database on mount\r\n  useEffect(() => {\r\n    loadConfigFromDatabase();\r\n  }, []);\r\n\r\n  // Sync with database when coming back online\r\n  useEffect(() => {\r\n    if (isOnline && !lastSynced) {\r\n      loadConfigFromDatabase();\r\n    }\r\n  }, [isOnline, lastSynced]);\r\n\r\n  // Update configuration function with database sync\r\n  const updateConfig = async (path, value) => {\r\n    // Optimistic update - update local state immediately\r\n    setConfig(prevConfig => {\r\n      const newConfig = JSON.parse(JSON.stringify(prevConfig));\r\n      const keys = path.split('.');\r\n      let current = newConfig;\r\n      \r\n      for (let i = 0; i < keys.length - 1; i++) {\r\n        if (!current[keys[i]] || typeof current[keys[i]] !== 'object') {\r\n          current[keys[i]] = {};\r\n        }\r\n        current = current[keys[i]];\r\n      }\r\n      \r\n      current[keys[keys.length - 1]] = value;\r\n      \r\n      // Save to localStorage immediately as backup\r\n      localStorage.setItem('foxShrineConfig', JSON.stringify(newConfig));\r\n      \r\n      return newConfig;\r\n    });\r\n\r\n    // Sync to database if online\r\n    if (isOnline) {\r\n      try {\r\n        const dataType = typeof value === 'boolean' ? 'boolean' : \r\n                        typeof value === 'number' ? 'number' :\r\n                        typeof value === 'object' ? 'json' : 'string';\r\n\r\n        const response = await fetch(`${API_BASE_URL}/config/update`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            path,\r\n            value,\r\n            dataType\r\n          }),\r\n        });\r\n\r\n        const result = await response.json();\r\n        \r\n        if (result.success) {\r\n          console.log(`✅ Config synced to database: ${path} = ${value}`);\r\n          setLastSynced(new Date());\r\n        } else {\r\n          throw new Error(result.message);\r\n        }\r\n      } catch (error) {\r\n        console.error(`❌ Failed to sync to database: ${path}`, error);\r\n        // Note: Local state is already updated, so app continues to work\r\n      }\r\n    } else {\r\n      console.log(`📱 Offline: Config saved locally, will sync when online: ${path} = ${value}`);\r\n    }\r\n  };\r\n\r\n  // Reset config to defaults\r\n  const resetConfig = async () => {\r\n    if (isOnline) {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/config/reset`, {\r\n          method: 'POST',\r\n        });\r\n        \r\n        const result = await response.json();\r\n        \r\n        if (result.success) {\r\n          console.log('✅ Config reset in database');\r\n          await loadConfigFromDatabase(); // Reload from database\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Failed to reset database config:', error);\r\n      }\r\n    }\r\n    \r\n    // Always reset local config\r\n    localStorage.removeItem('foxShrineConfig');\r\n    localStorage.removeItem('foxShrineConfigTimestamp');\r\n    setConfig(defaultConfig);\r\n  };\r\n\r\n  // Export current config as JSON\r\n  const exportConfig = () => {\r\n    const configContent = `// Fox Shrine VTuber Website Configuration\r\n// Generated on: ${new Date().toISOString()}\r\n// Database sync: ${lastSynced ? lastSynced.toISOString() : 'Never'}\r\n\r\nexport const siteConfig = ${JSON.stringify(config, null, 2)};\r\n\r\n// Helper Functions\r\nexport const getSocialLink = (platform) => {\r\n  return siteConfig.socialMedia[platform] || '#';\r\n};\r\n\r\nexport const getSupportLink = (platform) => {\r\n  return siteConfig.support[platform] || '#';\r\n};\r\n\r\nexport const isFeatureEnabled = (feature) => {\r\n  return siteConfig.features[feature] || false;\r\n};\r\n\r\nexport const getCharacterInfo = (field) => {\r\n  return siteConfig.character[field] || '';\r\n};\r\n\r\nexport const getStreamingInfo = (field) => {\r\n  return siteConfig.streaming[field] || '';\r\n};\r\n\r\nexport const getScheduleForDay = (day) => {\r\n  return siteConfig.schedule.weekly[day.toLowerCase()] || null;\r\n};\r\n`;\r\n\r\n    const blob = new Blob([configContent], { type: 'text/javascript' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `foxshrine-config-${Date.now()}.js`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  // Helper functions that work with current config\r\n  const getSocialLink = (platform) => {\r\n    return config.socialMedia?.[platform] || '#';\r\n  };\r\n\r\n  const getSupportLink = (platform) => {\r\n    return config.support?.[platform] || '#';\r\n  };\r\n\r\n  const isFeatureEnabled = (feature) => {\r\n    return config.features?.[feature] || false;\r\n  };\r\n\r\n  const getCharacterInfo = (field) => {\r\n    return config.character?.[field] || '';\r\n  };\r\n\r\n  const getStreamingInfo = (field) => {\r\n    return config.streaming?.[field] || '';\r\n  };\r\n\r\n  const getNavigationItems = () => {\r\n    return config.navigationMenu?.filter(item => {\r\n      if (item.path === '/gallery' && !isFeatureEnabled('enableFanArtGallery')) {\r\n        return false;\r\n      }\r\n      if (item.path === '/merch' && !isFeatureEnabled('showMerchSection')) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }) || [];\r\n  };\r\n\r\n  const value = {\r\n    config,\r\n    updateConfig,\r\n    resetConfig,\r\n    exportConfig,\r\n    loadConfigFromDatabase,\r\n    getSocialLink,\r\n    getSupportLink,\r\n    isFeatureEnabled,\r\n    getCharacterInfo,\r\n    getStreamingInfo,\r\n    getNavigationItems,\r\n    \r\n    // Status indicators\r\n    isLoading,\r\n    isOnline,\r\n    lastSynced\r\n  };\r\n\r\n  return (\r\n    <ConfigContext.Provider value={value}>\r\n      {children}\r\n    </ConfigContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ConfigProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}